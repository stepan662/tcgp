(
  {
    prog,
    compound_stat,
    def_part,
    def_variables,
    params,
    params_n,
    func_params,
    func_params_n,
    type,
    def_functions,
    def_func_more,
    st_list,
    stat_n,
    stat,
    if_more,
    expr_n,
    expr,
    sem_up,
    sem_up_n,
    operand,
    operator
  },
  {
    'void',
    'multipl',
    'minus',
    'plus',
    'less',
    'various',
    'ls_eq',
    'greater',
    'gr_eq',
    'eq',
    'lf_brct',
    'rg_brct',
    'lf_sq_brct',
    'rg_sq_brct',
    'semicolon',
    'comma',
    'doubdot',
    'assigment',
    'exp_num',
    'dec_num',
    'num',
    'string',
    'identifier',
    'lex_error',
    'eof',
    'dir_char',
    'kw_begin',
    'kw_boolean',
    'kw_do',
    'kw_else',
    'kw_end',
    'kw_false',
    'kw_find',
    'kw_forward',
    'kw_function',
    'kw_if',
    'kw_integer',
    'kw_readln',
    'kw_real',
    'kw_sort',
    'kw_string',
    'kw_then',
    'kw_true',
    'kw_var',
    'kw_while',
    'kw_write',
    'kw_type',
    'div',
    'dot',
    'kw_repeat',
    'kw_until'
  },
  {
    prog -> {'def_part', 'compound_stat', 'dot'},
    compound_stat -> {'kw_begin', 'st_list', 'kw_end'},
    def_part -> {'def_variables', 'def_functions'},
    def_variables -> {'kw_var', 'params'},
    def_variables -> {},
    params -> {'identifier', 'doubdot', 'type', 'semicolon', 'params_n'},
    params_n -> {'params'},
    params_n -> {},
    func_params -> {'identifier', 'doubdot', 'type', 'func_params_n'},
    func_params -> {},
    func_params_n -> {'semicolon', 'identifier', 'doubdot', 'type', 'func_params_n'},
    func_params_n -> {},
    type -> {'kw_integer'},
    type -> {'kw_real'},
    type -> {'kw_string'},
    type -> {'kw_boolean'},
    def_functions -> {'kw_function', 'identifier', 'lf_brct', 'func_params', 'rg_brct', 'doubdot', 'type', 'semicolon', 'def_func_more'},
    def_functions -> {},
    def_func_more -> {'def_variables', 'compound_stat', 'semicolon', 'def_functions'},
    def_func_more -> {'kw_forward', 'semicolon', 'def_functions'},
    st_list -> {'stat', 'stat_n'},
    st_list -> {},
    stat_n -> {'semicolon', 'stat',  'stat_n'},
    stat_n -> {},
    stat -> {'compound_stat'},
    stat -> {'identifier', 'assigment', 'expr'},
    stat -> {'kw_while', 'expr', 'kw_do', 'compound_stat'},
    stat -> {'kw_readln', 'lf_brct', 'identifier', 'rg_brct'},
    stat -> {'kw_write', 'lf_brct', 'expr', 'expr_n', 'rg_brct'},
    stat -> {'kw_repeat', 'stat', 'stat_n', 'kw_until', 'expr'},
    stat -> {'kw_if', 'expr', 'kw_then', 'compound_stat', 'if_more'},
    if_more -> {'kw_else', 'compound_stat'},
    if_more -> {},
    expr_n -> {'comma', 'expr', 'expr_n'},
    expr_n -> {},
    expr -> {'sem_up'},
    sem_up -> {'operand', 'sem_up_n'},
    sem_up_n -> {'operator', 'sem_up'},
    sem_up_n -> {'lf_brct', 'expr', 'expr_n', 'rg_brct'},
    sem_up_n -> {},
    operand -> {'lf_brct', 'sem_up', 'rg_brct'},
    operand -> {'num'},
    operand -> {'string'},
    operand -> {'identifier'},
    operator -> {'multipl'},
    operator -> {'minus'},
    operator -> {'plus'},
    operator -> {'less'},
    operator -> {'various'},
    operator -> {'ls_eq'},
    operator -> {'greater'},
    operator -> {'gr_eq'},
    operator -> {'eq'}
  },
  prog
)
